type user {
  _id: ID
  email: String
  token: String
  refreshToken: String
}

type UserResponse {
  message: String
  user: user
}

input RegisterInput {
  basicDetails: BasicDetailsInput
  businessAddress: BusinessAddressInput
  contactDetails: ContactDetailsInput
  password: String
}

type BasicDetails {
  companyName: String
  legalEntityType: String
  businessDescription: String
  industrySector: String
}

input BasicDetailsInput {
  companyName: String
  legalEntityType: String
  businessDescription: String
  industrySector: String
}

type ContactDetails {
  contactPerson: String
  contactEmail: String
  contactPhone: String
  website: String
}

input ContactDetailsInput {
  contactPerson: String
  contactEmail: String
  contactPhone: String
  website: String
}

type BusinessAddress {
  registeredOfficeAddress: String
  mailingAddress: String
  stateProvince: String
  city: String
  postalCode: String
}

input BusinessAddressInput {
  registeredOfficeAddress: String
  mailingAddress: String
  stateProvince: String
  city: String
  postalCode: String
}

type UserDataRegister {
  _id: ID
  basicDetails: BasicDetails
  businessAddress: BusinessAddress
  contactDetails: ContactDetails
}

type RegisterInputResponse {
  message: String
  orgDetails: UserDataRegister
  token: String
  refreshToken: String
}

type userData  {
  _id: ID
  firstName: String
  lastName: String
  email: String
  role: String
  city: String
  phone: String
  location: String
}

type User  {
  message:String
  user : userData
}

type LogoutResponse {
  message: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  city: String
  phone: String
  location: String
}
type CreateUserInputResponse {
  message: String!
  user: userData
  refreshToken: String
  token: String
}